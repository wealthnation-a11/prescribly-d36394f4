import { useEffect, useMemo, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { usePageSEO } from "@/hooks/usePageSEO";

const PrescriptionPrint = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [rx, setRx] = useState<any | null>(null);
  const [loading, setLoading] = useState(true);

  usePageSEO({
    title: "Print Prescription | Prescribly",
    description: "Printable prescription generated by the AI diagnosis engine.",
    canonicalPath: id ? `/prescriptions/print/${id}` : "/prescriptions/print",
  });

  useEffect(() => {
    const fetchRx = async () => {
      if (!id) return;
      const { data, error } = await supabase
        .from('patient_prescriptions')
        .select('*')
        .eq('id', id)
        .maybeSingle();
      if (!error) setRx(data);
      setLoading(false);
    };
    fetchRx();
  }, [id]);

  const onPrint = () => window.print();

  const patientName = useMemo(() => {
    return "Patient"; // Avoid extra queries; can be enhanced later
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-muted-foreground">Loading…</div>
      </div>
    );
  }

  if (!rx) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-muted-foreground">Prescription not found.</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background p-4 print:p-0">
      <div className="max-w-2xl mx-auto space-y-4 print:space-y-0">
        <div className="flex gap-2 no-print">
          <Button variant="outline" onClick={() => navigate(-1)} className="flex-1">Back</Button>
          <Button onClick={onPrint} className="flex-1">Print</Button>
        </div>

        <Card className="shadow-sm print:shadow-none print:border-0">
          <CardContent className="p-6 print:p-8">
            <header className="mb-6 text-center">
              <h1 className="text-2xl font-semibold">Prescription</h1>
              <p className="text-sm text-muted-foreground">Generated by Prescribly AI</p>
            </header>

            <section className="grid grid-cols-2 gap-4 text-sm mb-6">
              <div>
                <div className="text-muted-foreground">Patient</div>
                <div className="font-medium">{patientName}</div>
              </div>
              <div>
                <div className="text-muted-foreground">Date</div>
                <div className="font-medium">{new Date(rx.created_at).toLocaleString()}</div>
              </div>
              <div>
                <div className="text-muted-foreground">Diagnosis</div>
                <div className="font-medium">{rx.diagnosis?.name} {rx.diagnosis?.icd10 ? `(ICD-10: ${rx.diagnosis.icd10})` : ''}</div>
              </div>
              <div>
                <div className="text-muted-foreground">Confidence</div>
                <div className="font-medium">{Math.round((rx.diagnosis?.confidence || 0) * 100)}%</div>
              </div>
            </section>

            <section className="mb-6">
              <h2 className="text-base font-medium mb-2">Medications</h2>
              <div className="space-y-2">
                {(rx.medications || []).map((m: any, i: number) => (
                  <div key={i} className="border rounded-md p-3">
                    <div className="font-medium">{m.name}</div>
                    <div className="text-sm text-muted-foreground">{m.dosage} • {m.duration}</div>
                    {m.instructions && (
                      <div className="text-xs text-muted-foreground mt-1">{m.instructions}</div>
                    )}
                  </div>
                ))}
              </div>
            </section>

            {Array.isArray(rx.safety_flags) && rx.safety_flags.length > 0 && (
              <section className="mb-6">
                <h2 className="text-base font-medium mb-2">Safety Notes</h2>
                <ul className="list-disc list-inside text-sm text-muted-foreground space-y-1">
                  {rx.safety_flags.map((s: string, i: number) => <li key={i}>{s}</li>)}
                </ul>
              </section>
            )}

            <footer className="text-xs text-muted-foreground mt-8">
              This prescription was generated based on provided symptoms and patient history using safety-validated standing orders.
            </footer>
          </CardContent>
        </Card>
      </div>

      <style>{`
        @media print {
          .no-print { display: none; }
          body { background: white; }
        }
      `}</style>
    </div>
  );
};

export default PrescriptionPrint;
