import { useLocation, useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Download, ArrowLeft, FileText, User, Pill, AlertTriangle } from 'lucide-react';
import { toast } from "@/hooks/use-toast";
import { usePageSEO } from "@/hooks/usePageSEO";

interface PrescriptionData {
  visitId: string;
  diagnoses: Array<{
    name: string;
    confidence: number;
    icd10: string;
  }>;
  prescription?: {
    id: string;
    medications: Array<{
      name: string;
      dosage: string;
      frequency: string;
      duration: string;
      instructions?: string;
    }>;
    diagnosis: {
      name: string;
      icd10: string;
      confidence: number;
    };
  };
  safetyFlags: string[];
  status: string;
  patientInfo?: {
    name: string;
    dateOfBirth: string;
    gender: string;
  };
  symptoms: {
    symptomText: string;
    selectedSymptoms: string[];
    answers: Array<{ id: string; value: string; }>;
  };
}

export default function Prescription() {
  usePageSEO({
    title: "Prescription Results | Prescribly",
    description: "View and download your prescription results from the wellness assessment",
  });

  const location = useLocation();
  const navigate = useNavigate();
  const [prescriptionData, setPrescriptionData] = useState<PrescriptionData | null>(null);

  useEffect(() => {
    const data = location.state?.prescriptionData;
    if (data) {
      setPrescriptionData(data);
    }
  }, [location.state]);

  const downloadAsPDF = () => {
    if (!prescriptionData) return;

    try {
      const content = generatePrescriptionContent();
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `prescription-${prescriptionData.visitId}-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Download Complete",
        description: "Your prescription has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "Unable to download prescription. Please try again.",
        variant: "destructive",
      });
    }
  };

  const generatePrescriptionContent = (): string => {
    if (!prescriptionData) return '';

    const currentDate = new Date().toLocaleDateString();
    
    return `
PRESCRIPTION REPORT
Generated on: ${currentDate}
Visit ID: ${prescriptionData.visitId}

========================================
PATIENT INFORMATION
========================================
${prescriptionData.patientInfo ? `
Name: ${prescriptionData.patientInfo.name}
Date of Birth: ${prescriptionData.patientInfo.dateOfBirth}
Gender: ${prescriptionData.patientInfo.gender}
` : 'Patient information not available'}

========================================
SYMPTOMS REPORTED
========================================
Primary Symptoms: ${prescriptionData.symptoms.symptomText || 'None specified'}

Selected Symptoms: ${prescriptionData.symptoms.selectedSymptoms?.length ? 
  prescriptionData.symptoms.selectedSymptoms.join(', ') : 'None'}

Assessment Responses:
${prescriptionData.symptoms.answers?.map(answer => 
  `- ${answer.id}: ${answer.value}`).join('\n') || 'None recorded'}

========================================
DIAGNOSIS
========================================
${prescriptionData.diagnoses.map((diagnosis, index) => `
${index + 1}. ${diagnosis.name}
   ICD-10 Code: ${diagnosis.icd10}
   Confidence: ${(diagnosis.confidence * 100).toFixed(1)}%
`).join('')}

========================================
PRESCRIPTION
========================================
${prescriptionData.prescription ? `
Primary Diagnosis: ${prescriptionData.prescription.diagnosis.name}
ICD-10: ${prescriptionData.prescription.diagnosis.icd10}

MEDICATIONS:
${prescriptionData.prescription.medications.map((med, index) => `
${index + 1}. ${med.name}
   Dosage: ${med.dosage}
   Frequency: ${med.frequency}
   Duration: ${med.duration}
   ${med.instructions ? `Instructions: ${med.instructions}` : ''}
`).join('')}
` : 'No prescription generated - no safe medication protocol available.'}

========================================
SAFETY INFORMATION
========================================
${prescriptionData.safetyFlags?.length ? `
Safety Flags:
${prescriptionData.safetyFlags.map(flag => `- ${flag}`).join('\n')}
` : 'No safety concerns identified.'}

Status: ${prescriptionData.status}

========================================
IMPORTANT NOTICE
========================================
This prescription was generated by an AI-powered assessment system.
Please consult with a healthcare professional before taking any medications.
This document is for informational purposes only and should not replace
professional medical advice, diagnosis, or treatment.

Generated by Prescribly AI Health Assessment
Visit ID: ${prescriptionData.visitId}
Date: ${currentDate}
    `.trim();
  };

  if (!prescriptionData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4">
        <div className="max-w-2xl mx-auto pt-20">
          <Card className="text-center">
            <CardHeader>
              <CardTitle className="flex items-center justify-center gap-2 text-muted-foreground">
                <FileText className="h-6 w-6" />
                No Prescription Data Available
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-muted-foreground">
                No prescription data available. Please complete the wellness check first.
              </p>
              <Button 
                onClick={() => navigate('/wellness-checker')}
                className="gap-2"
              >
                <ArrowLeft className="h-4 w-4" />
                Start Wellness Check
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/5 p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <Button
            variant="ghost"
            onClick={() => navigate(-1)}
            className="gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            Back
          </Button>
          <Button onClick={downloadAsPDF} className="gap-2">
            <Download className="h-4 w-4" />
            Download Prescription
          </Button>
        </div>

        {/* Main Content */}
        <div className="space-y-6">
          {/* Patient Info */}
          {prescriptionData.patientInfo && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="h-5 w-5" />
                  Patient Information
                </CardTitle>
              </CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Name</label>
                  <p className="text-lg">{prescriptionData.patientInfo.name}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Date of Birth</label>
                  <p className="text-lg">{prescriptionData.patientInfo.dateOfBirth}</p>
                </div>
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Gender</label>
                  <p className="text-lg">{prescriptionData.patientInfo.gender}</p>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Symptoms */}
          <Card>
            <CardHeader>
              <CardTitle>Reported Symptoms</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {prescriptionData.symptoms.symptomText && (
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Primary Symptoms</label>
                  <p className="mt-1">{prescriptionData.symptoms.symptomText}</p>
                </div>
              )}
              
              {prescriptionData.symptoms.selectedSymptoms?.length > 0 && (
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Selected Symptoms</label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {prescriptionData.symptoms.selectedSymptoms.map((symptom, index) => (
                      <Badge key={index} variant="secondary">{symptom}</Badge>
                    ))}
                  </div>
                </div>
              )}

              {prescriptionData.symptoms.answers?.length > 0 && (
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Assessment Responses</label>
                  <div className="space-y-2 mt-2">
                    {prescriptionData.symptoms.answers.map((answer, index) => (
                      <div key={index} className="text-sm">
                        <span className="font-medium">{answer.id}:</span> {answer.value}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Diagnosis */}
          <Card>
            <CardHeader>
              <CardTitle>Diagnosis Results</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {prescriptionData.diagnoses.map((diagnosis, index) => (
                  <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                    <div className="space-y-1">
                      <h3 className="font-semibold">{diagnosis.name}</h3>
                      <p className="text-sm text-muted-foreground">ICD-10: {diagnosis.icd10}</p>
                    </div>
                    <Badge variant={index === 0 ? "default" : "secondary"}>
                      {(diagnosis.confidence * 100).toFixed(1)}% confidence
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Prescription */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Pill className="h-5 w-5" />
                Prescription
              </CardTitle>
            </CardHeader>
            <CardContent>
              {prescriptionData.prescription ? (
                <div className="space-y-6">
                  <div className="p-4 bg-muted/50 rounded-lg">
                    <h3 className="font-semibold mb-2">Primary Diagnosis</h3>
                    <p>{prescriptionData.prescription.diagnosis.name}</p>
                    <p className="text-sm text-muted-foreground">
                      ICD-10: {prescriptionData.prescription.diagnosis.icd10} 
                      ({(prescriptionData.prescription.diagnosis.confidence * 100).toFixed(1)}% confidence)
                    </p>
                  </div>

                  <Separator />

                  <div>
                    <h3 className="font-semibold mb-4">Prescribed Medications</h3>
                    <div className="space-y-4">
                      {prescriptionData.prescription.medications.map((medication, index) => (
                        <div key={index} className="border rounded-lg p-4">
                          <h4 className="font-medium text-lg mb-3">{medication.name}</h4>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                              <label className="text-sm font-medium text-muted-foreground">Dosage</label>
                              <p>{medication.dosage}</p>
                            </div>
                            <div>
                              <label className="text-sm font-medium text-muted-foreground">Frequency</label>
                              <p>{medication.frequency}</p>
                            </div>
                            <div>
                              <label className="text-sm font-medium text-muted-foreground">Duration</label>
                              <p>{medication.duration}</p>
                            </div>
                          </div>
                          {medication.instructions && (
                            <div className="mt-3">
                              <label className="text-sm font-medium text-muted-foreground">Instructions</label>
                              <p className="mt-1">{medication.instructions}</p>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-8">
                  <p className="text-muted-foreground">
                    No prescription generated - no safe medication protocol available for the diagnosed condition.
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Safety Information */}
          {prescriptionData.safetyFlags?.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-amber-600">
                  <AlertTriangle className="h-5 w-5" />
                  Safety Information
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {prescriptionData.safetyFlags.map((flag, index) => (
                    <div key={index} className="flex items-start gap-2 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                      <AlertTriangle className="h-4 w-4 text-amber-600 mt-0.5 flex-shrink-0" />
                      <p className="text-sm text-amber-800">{flag}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Disclaimer */}
          <Card className="border-dashed">
            <CardContent className="pt-6">
              <div className="text-center space-y-2">
                <h3 className="font-semibold text-muted-foreground">Important Notice</h3>
                <p className="text-sm text-muted-foreground">
                  This prescription was generated by an AI-powered assessment system. 
                  Please consult with a healthcare professional before taking any medications. 
                  This document is for informational purposes only and should not replace 
                  professional medical advice, diagnosis, or treatment.
                </p>
                <p className="text-xs text-muted-foreground">
                  Visit ID: {prescriptionData.visitId} | Generated on: {new Date().toLocaleDateString()}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}